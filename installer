#!/bin/bash

# stdin pw
echo '!skcc1234' | sudo -S ./init

# network driver
#. ./network driver

# Timezone setup
sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
sudo apt-get update
sudo apt-get install rdate -y
sudo rdate -s time.bora.net

echo "========================================================================================================"
echo "Timezone setup completed."
echo "========================================================================================================"
date
sleep 3s

# swap off
sudo swapon --show
sudo free -h
sudo swapoff -a
sudo rm -f /swap.img
checkval="/swap.img"
sudo sed -i 's/\/swap.img/\# \/swap.img/g' /etc/fstab
sudo swapon --show

# docker
sudo apt-get update
sudo apt-get install docker.io apt-transport-https gnupg-agent conntrack -y
sudo adduser `id -un` docker
sudo chmod 777 /var/run/docker.sock

echo "========================================================================================================"
echo "docker installed."
echo "========================================================================================================"
docker version
sleep 3s

# install k9s, minikube, kubectl, istioctl
mkdir -p /home/airuntime/tmp_bin
sudo cp /mnt/usb/medical-insight/2.kubernetes/bin/* /home/airuntime/tmp_bin/
sudo chown airuntime:airuntime /home/airuntime/tmp_bin/*
sudo chmod +x /home/airuntime/tmp_bin/*
sudo install /home/airuntime/tmp_bin/* /usr/local/bin/

# minikube 시작
cd ~
minikube start --kubernetes-version=v1.18.17 --driver=none --apiserver-ips 127.0.0.1 --apiserver-name localhost && \
minikube status

echo "========================================================================================================"
echo "Creating minikube cluster. it takes 1 min."
echo "========================================================================================================"
for x in {1..60} ; do
    sleep 1s
    printf .
done | pv -pt -i0.2 -s60 -w 80 > /dev/null

# cert mgr, istio
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.15.1/cert-manager.yaml
istioctl install -y

echo "========================================================================================================"
echo "Deploying Cert-manager & Istio. it takes 30s."
echo "========================================================================================================"
for x in {1..30} ; do
    sleep 1s
    printf .
done | pv -pt -i0.2 -s30 -w 80 > /dev/null

# java
# install the necessary dependencies
sudo apt-get -q update
sudo apt-get -yq install gnupg curl -y

# add Azul's public key
sudo apt-key adv \
  --keyserver hkp://keyserver.ubuntu.com:80 \
  --recv-keys 0xB1998361219BD9C9

# download and install the package that adds 
# the Azul APT repository to the list of sources 
curl -O https://cdn.azul.com/zulu/bin/zulu-repo_1.0.0-2_all.deb

# install the package
sudo apt-get install ./zulu-repo_1.0.0-2_all.deb

# update the package sources
sudo apt-get update

# install Azul Zulu JDK 11
sudo apt-get install zulu11-jdk -y

echo "========================================================================================================"
echo "java installed."
echo "========================================================================================================"
java -version
sleep 3s

# install redis
sudo apt-get update
sudo apt-get install redis-server -y
sudo sed -i 's/\# requirepass foobared/requirepass \!skcc1234/g' /etc/redis/redis.conf
sudo systemctl restart redis-server

echo "========================================================================================================"
echo "redis installed."
echo "========================================================================================================"
redis-cli --version
sleep 3s

# install nginx
#sudo apt-get update
#sudo apt-get install nginx -y
#sudo cp /mnt/usb/medical-insight/3.aiip-runtime/nginx.conf /etc/nginx/nginx.conf

# install mariadb
sudo apt-get update
sudo apt-get install mariadb-server -y

# initial data migration
cat /mnt/usb/medical-insight/3.aiip-runtime/createDB.sql | sudo mysql -u root
cat /mnt/usb/medical-insight/3.aiip-runtime/v1_airuntime_20210727_060001.sql | mysql -u airuntime --password='!skcc1234' airuntime

echo "========================================================================================================"
echo "MariaDB installed."
echo "========================================================================================================"
mysql --version
sleep 3s

# minikube로 구성된 K8S에 LoadBalancer 타입으로 서비스를 배포하면, External IP할당이 되지 않는다.
# NodePort 타입으로 변경하여 해결.
echo "========================================================================================================"
echo "type of istio-ingressgateway changed."
echo "========================================================================================================"
kubectl -n istio-system get svc istio-ingressgateway
kubectl -n istio-system get svc istio-ingressgateway -o yaml | sed "s/type: LoadBalancer/type: NodePort/g" | kubectl replace -f -
echo "--------------------------------------------------------------------------------------------------------"
kubectl -n istio-system get svc istio-ingressgateway
echo "========================================================================================================"
sleep 3s

# create working directory
sudo mkdir -p /data/pacs/input /data/pacs/output /data/pacs/backup /data/pacs/tmp /data/airuntime/config /data/airuntime/www/predict/history
sudo chown -R airuntime:airuntime /data
sudo chmod -R 777 /data
sudo ln -s /data/pacs /pacs
sudo ln -s /data/airuntime/www /www

# setup nfs
sudo apt-get update
sudo apt-get install nfs-kernel-server -y
#sudo echo -e "\n/data/pacs/ *(rw,sync,insecure,no_subtree_check,no_root_squash)" >> /etc/exports
echo -e "\n/data/pacs/ *(rw,sync,insecure,no_subtree_check,no_root_squash)" | sudo tee -a /etc/exports
sudo exportfs -a
sudo systemctl restart nfs-kernel-server
echo "========================================================================================================"
echo "NFS setup completed."
echo "========================================================================================================"
sudo systemctl status nfs-kernel-server
sleep 3s

# make app home
mkdir -p /home/airuntime/aiip-runtime
sudo cp -R /mnt/usb/medical-insight/3.aiip-runtime/* /home/airuntime/aiip-runtime
sudo chown -R airuntime:airuntime /home/airuntime/aiip-runtime

# web 소스 빌드
#sudo apt-get update
#sudo apt-get install npm -y
#cd /home/airuntime/aiip-runtime/airuntime-web
#sed -i "s/gateway/$(hostname -I | awk '{print $1}')/g" /home/airuntime/aiip-runtime/airuntime-web/.env.release
#npm install
#npm run build

# web 소스 적용
#sudo rsync -avz ./dist/* \
#  /usr/share/nginx/html/airuntime-web && \
#sudo chown -R www-data:www-data /usr/share/nginx/html/airuntime-web && \
#sudo systemctl restart nginx


# setup ingress host, ip
sed -i "s/192.168.1.31/$(hostname -I | awk '{print $1}')/g" /home/airuntime/aiip-runtime/config/common-stg.yml
sed -i "s/99999/$(kubectl -n istio-system get svc istio-ingressgateway -o yaml | grep -B 2 'port: 80' | grep 'nodePort' | awk '{print $2}')/g" /home/airuntime/aiip-runtime/config/common-stg.yml
cp /home/airuntime/aiip-runtime/config/common-stg.yml /data/airuntime/config/

# minikube는 api server 포트가 8443으로 되어 있어서 443 -> 8443 포트포워딩 필요
sudo iptables -t nat -A OUTPUT -o lo -p tcp --dport 443 -j REDIRECT --to-port 8443


# knative-serving
kubectl apply -f /mnt/usb/medical-insight/2.kubernetes/knative-serving/serving-crds.yaml
kubectl apply -f /mnt/usb/medical-insight/2.kubernetes/knative-serving/serving-core.yaml
kubectl apply -f /mnt/usb/medical-insight/2.kubernetes/knative-serving/net-certmanager-release.yaml
kubectl apply -f /mnt/usb/medical-insight/2.kubernetes/knative-serving/net-istio-release.yaml

echo "========================================================================================================"
echo "Deploying knative-serving. it takes 30s."
echo "========================================================================================================"
for x in {1..30} ; do
    sleep 1s
    printf .
done | pv -pt -i0.2 -s30 -w 80 > /dev/null

# kfserving
kubectl apply -f /mnt/usb/medical-insight/2.kubernetes/kfserving.yaml

echo "========================================================================================================"
echo "Deploying kfserving. it takes 30s."
echo "========================================================================================================"
for x in {1..30} ; do
    sleep 1s
    printf .
done | pv -pt -i0.2 -s30 -w 80 > /dev/null

# knative와 kfserving 버전 호환 문제로 임시 조치
kubectl -n kfserving-system get cm inferenceservice-config -o yaml | sed "s/cluster-local-gateway/knative-local-gateway/g" | kubectl replace -f -

sed -i "s/192.168.1.31/$(hostname -I | awk '{print $1}')/g" /home/airuntime/aiip-runtime/airuntime-watcher/nfs-pv.yml
kubectl create namespace auto-create-26
kubectl -n auto-create-26 apply -f /home/airuntime/aiip-runtime/airuntime-watcher/nfs-pv.yml

echo "========================================================================================================"
echo "Creating pv. it takes 10s."
echo "========================================================================================================"
for x in {1..10} ; do
    sleep 1s
    printf .
done | pv -pt -i0.2 -s10 -w 80 > /dev/null

# setup service deamon
sudo cp /home/airuntime/aiip-runtime/serviced/* /etc/systemd/system/
sudo systemctl enable airuntime-configserver.service
sudo systemctl enable airuntime-gateway.service
sudo systemctl enable airuntime-account.service
#sudo systemctl enable airuntime-monitoring.service
#sudo systemctl enable airuntime-history.service
sudo systemctl enable airuntime-core.service
sudo systemctl enable airuntime-ifservice.service
sudo systemctl enable airuntime-watcher.service

# backend svc run
sudo systemctl start airuntime-configserver.service
sudo systemctl start airuntime-gateway.service
sudo systemctl start airuntime-account.service
#sudo systemctl start airuntime-monitoring.service
#sudo systemctl start airuntime-history.service
sudo systemctl start airuntime-core.service
sudo systemctl start airuntime-ifservice.service

echo "========================================================================================================"
echo "AI Runtime Backend Servives are running."
echo "========================================================================================================"
ps -ef | grep "java -jar"
sleep 3s

sudo apt-get update
sudo apt-get install jq python3-pip -y

# deploy
# 연동 중지
sudo systemctl stop airuntime-watcher.service

# 모델 삭제
inferenceId=$(cat /home/airuntime/aiip-runtime/airuntime-watcher/src/watcher.conf | grep 'inferenceId' | awk '{print $3}')
ip_addr=$(hostname -I | awk '{print $1}')
token=$(curl --location --request POST "http://$ip_addr:17000/api/auth/issueToken" \
--header 'Content-Type: application/json' \
--data-raw '{
    "accessKey": "04f23bfa-80e0-4da9-a0e1-19e75ac87e48" 
}' | jq '.token' | sed 's/"//g')

sleep 3s

curl --location --request DELETE "http://$ip_addr:17000/api/core/models/$inferenceId?account_id=26" \
--header 'Content-Type: application/json' \
--header "Authorization: $token"

# 기존 정보 삭제
sed -i '/inferenceId/d' /home/airuntime/aiip-runtime/airuntime-watcher/src/watcher.conf

# 모델 배포
echo "inferenceId = $( \
curl --location --request POST "http://$ip_addr:17000/api/core/models/deployment?account_id=26&account_id=26" \
--header 'Content-Type: application/json' \
--header "Authorization: $token" \
--data-raw '{
  "account_id": 26,
  "description": "Brain Hemorrhage Detection Solution, SKH-BCH-001, v 2.0.0",
  "metadata": {
    "name": "skh-bch-001",
    "k8s_ns_nm": "auto-create-26",
    "concurrent": 1
  },
  "predictor": {
    "type": "custom",
    "minReplicas": 1,
    "maxReplicas": 1,
    "custom": {
      "container": {
        "image": "wxmaseve/nvidia-hm:0.0.1.knuh-triage",
        "resources": {
          "limits": {
            "cpu": 2,
            "memory": 4,
            "gpu": 0
          },
          "requests": {
            "cpu": 2,
            "memory": 4,
            "gpu": 0
          }
        },
        "optional_json": "{\n    \"env\": [{\n            \"name\": \"STORAGE_URI\",\n            \"value\": \"pvc://on-nfs-pvc\"\n        },\n        {\n            \"name\": \"MODEL_NAME\",\n            \"value\": \"skh-bch-001\"\n        }\n    ],\n    \"args\": [\n        \"--model_name=$(MODEL_NAME)\"\n    ]\n}"
      }
    }
  }
}' | jq '.data.service_id' | sed 's/"//g')" >> /home/airuntime/aiip-runtime/airuntime-watcher/src/watcher.conf


curl --location --request DELETE "http://$ip_addr:17000/api/auth/cancellationToken" \
--header 'Content-Type: application/json' \
--header "Authorization: $token"

echo "========================================================================================================"
echo "Deploying AI Model(Brain Hemorrhage Detection Solution). it takes 10m."
echo "========================================================================================================"
for x in {1..600} ; do
    sleep 1s
    printf .
done | pv -pt -i0.2 -s600 -w 80 > /dev/null


# interface
sudo apt-get update
sudo apt-get install python3-pip -y
sudo pip install watchdog
sed -i "s/192.168.1.31/$(hostname -I | awk '{print $1}')/g" /home/airuntime/aiip-runtime/airuntime-watcher/src/watcher.conf
sudo systemctl start airuntime-watcher.service

echo "========================================================================================================"
echo "AI Runtime Watcher(Interface Module) is running."
echo "--------------------------------------------------------------------------------------------------------"
ps -ef | grep "main.py"
sleep 3s

echo "Preparing Sample-Test..."
echo "========================================================================================================"
sleep 5s

# TEST
sudo cp -R /mnt/usb/medical-insight/4.test/1.2.410.2000010.82.220.12100424023 /data/pacs/input/
sudo mv /data/pacs/input/1.2.410.2000010.82.220.12100424023 /data/pacs/input/RQ1.2.410.2000010.82.220.12100424023
tail -f /home/airuntime/aiip-runtime/airuntime-watcher/logs/airuntime-watcher.log

